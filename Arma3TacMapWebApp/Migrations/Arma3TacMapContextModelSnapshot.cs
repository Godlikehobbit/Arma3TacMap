// <auto-generated />
using System;
using Arma3TacMapWebApp.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Arma3TacMapWebApp.Migrations
{
    [DbContext(typeof(Arma3TacMapContext))]
    partial class Arma3TacMapContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.TacMap", b =>
                {
                    b.Property<int>("TacMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerUserID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentTacMapID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReadOnlyToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadWriteToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorldName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TacMapID");

                    b.HasIndex("OwnerUserID");

                    b.HasIndex("ParentTacMapID");

                    b.ToTable("TacMap");
                });

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.TacMapAccess", b =>
                {
                    b.Property<int>("TacMapAccessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TacMapID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TacMapAccessID");

                    b.HasIndex("TacMapID");

                    b.HasIndex("UserID");

                    b.ToTable("TacMapAccess");
                });

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.TacMapMarker", b =>
                {
                    b.Property<int>("TacMapMarkerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MarkerData")
                        .HasColumnType("TEXT");

                    b.Property<int>("TacMapID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TacMapMarkerID");

                    b.HasIndex("TacMapID");

                    b.HasIndex("UserID");

                    b.ToTable("TacMapMarker");
                });

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SteamId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLabel")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.TacMap", b =>
                {
                    b.HasOne("Arma3TacMapWebApp.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arma3TacMapWebApp.Entities.TacMap", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentTacMapID");
                });

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.TacMapAccess", b =>
                {
                    b.HasOne("Arma3TacMapWebApp.Entities.TacMap", "TacMap")
                        .WithMany()
                        .HasForeignKey("TacMapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arma3TacMapWebApp.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Arma3TacMapWebApp.Entities.TacMapMarker", b =>
                {
                    b.HasOne("Arma3TacMapWebApp.Entities.TacMap", "TacMap")
                        .WithMany()
                        .HasForeignKey("TacMapID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Arma3TacMapWebApp.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
